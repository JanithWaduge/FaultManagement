{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\nexport function useFaultNotes(token) {\n  _s();\n  const [notes, setNotes] = useState({}); // { [faultId]: [note objects] }\n  const [loading, setLoading] = useState({});\n  const [error, setError] = useState(null);\n  const fetchNotes = useCallback(async faultId => {\n    if (!token || !faultId) return;\n    setLoading(prev => ({\n      ...prev,\n      [faultId]: true\n    }));\n    setError(null);\n    try {\n      const res = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/faults/notes/${faultId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (!res.ok) {\n        if (res.status === 404) {\n          // No notes found for this fault\n          setNotes(prev => ({\n            ...prev,\n            [faultId]: []\n          }));\n          return;\n        }\n        throw new Error(`Failed to fetch notes: ${res.status}`);\n      }\n      const data = await res.json();\n      setNotes(prev => ({\n        ...prev,\n        [faultId]: data || []\n      }));\n    } catch (err) {\n      console.error('Error fetching notes:', err);\n      setError(err.message);\n      setNotes(prev => ({\n        ...prev,\n        [faultId]: []\n      }));\n    } finally {\n      setLoading(prev => ({\n        ...prev,\n        [faultId]: false\n      }));\n    }\n  }, [token]);\n  const addNote = useCallback(async ({\n    FaultID,\n    Notes\n  }) => {\n    if (!token) throw new Error(\"Authentication required.\");\n    if (!Notes || Notes.trim() === '') throw new Error(\"Notes cannot be empty.\");\n    setError(null);\n    try {\n      const res = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/faults/notes`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          FaultID,\n          Notes: Notes.trim()\n        })\n      });\n      if (!res.ok) {\n        const errorData = await res.json().catch(() => ({}));\n        throw new Error(errorData.message || \"Failed to save note\");\n      }\n      const data = await res.json();\n      setNotes(prev => ({\n        ...prev,\n        [FaultID]: [data.note, ...(prev[FaultID] || [])]\n      }));\n      return data.note;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, [token]);\n  const editNote = useCallback(async ({\n    id,\n    Notes,\n    FaultID\n  }) => {\n    if (!token) throw new Error(\"Authentication required.\");\n    if (!Notes || Notes.trim() === '') throw new Error(\"Notes cannot be empty.\");\n    setError(null);\n    try {\n      const res = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/faults/notes/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          Notes: Notes.trim()\n        })\n      });\n      if (!res.ok) {\n        const errorData = await res.json().catch(() => ({}));\n        throw new Error(errorData.message || \"Failed to edit note\");\n      }\n      const data = await res.json();\n      setNotes(prev => ({\n        ...prev,\n        [FaultID]: (prev[FaultID] || []).map(note => note.id === id ? data.note : note)\n      }));\n      return data.note;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, [token]);\n  const deleteNote = useCallback(async ({\n    id,\n    FaultID\n  }) => {\n    if (!token) throw new Error(\"Authentication required.\");\n    setError(null);\n    try {\n      const res = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/faults/notes/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (!res.ok) {\n        const errorData = await res.json().catch(() => ({}));\n        throw new Error(errorData.message || \"Failed to delete note\");\n      }\n      setNotes(prev => ({\n        ...prev,\n        [FaultID]: (prev[FaultID] || []).filter(note => note.id !== id)\n      }));\n      return true;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  }, [token]);\n  const clearNotesCache = useCallback(() => {\n    setNotes({});\n    setError(null);\n  }, []);\n  return {\n    notes,\n    loading,\n    error,\n    fetchNotes,\n    addNote,\n    editNote,\n    deleteNote,\n    clearNotesCache\n  };\n}\n_s(useFaultNotes, \"AK8BPsnK5Z/ObTZMpjv+gZbQ1go=\");","map":{"version":3,"names":["useState","useCallback","useFaultNotes","token","_s","notes","setNotes","loading","setLoading","error","setError","fetchNotes","faultId","prev","res","fetch","process","env","REACT_APP_BACKEND_URL","headers","Authorization","ok","status","Error","data","json","err","console","message","addNote","FaultID","Notes","trim","method","body","JSON","stringify","errorData","catch","note","editNote","id","map","deleteNote","filter","clearNotesCache"],"sources":["C:/Users/Janith/Desktop/My Projects/Fault Management System/Frontend/src/useFaultNotes.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\r\n\r\nexport function useFaultNotes(token) {\r\n  const [notes, setNotes] = useState({}); // { [faultId]: [note objects] }\r\n  const [loading, setLoading] = useState({});\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchNotes = useCallback(\r\n    async (faultId) => {\r\n      if (!token || !faultId) return;\r\n      \r\n      setLoading(prev => ({ ...prev, [faultId]: true }));\r\n      setError(null);\r\n      \r\n      try {\r\n        const res = await fetch(\r\n          `${process.env.REACT_APP_BACKEND_URL}/api/faults/notes/${faultId}`,\r\n          {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          }\r\n        );\r\n        \r\n        if (!res.ok) {\r\n          if (res.status === 404) {\r\n            // No notes found for this fault\r\n            setNotes((prev) => ({ ...prev, [faultId]: [] }));\r\n            return;\r\n          }\r\n          throw new Error(`Failed to fetch notes: ${res.status}`);\r\n        }\r\n        \r\n        const data = await res.json();\r\n        setNotes((prev) => ({ ...prev, [faultId]: data || [] }));\r\n      } catch (err) {\r\n        console.error('Error fetching notes:', err);\r\n        setError(err.message);\r\n        setNotes((prev) => ({ ...prev, [faultId]: [] }));\r\n      } finally {\r\n        setLoading(prev => ({ ...prev, [faultId]: false }));\r\n      }\r\n    },\r\n    [token]\r\n  );\r\n\r\n  const addNote = useCallback(\r\n    async ({ FaultID, Notes }) => {\r\n      if (!token) throw new Error(\"Authentication required.\");\r\n      if (!Notes || Notes.trim() === '') throw new Error(\"Notes cannot be empty.\");\r\n      \r\n      setError(null);\r\n      \r\n      try {\r\n        const res = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/faults/notes`, {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n          body: JSON.stringify({ FaultID, Notes: Notes.trim() }),\r\n        });\r\n        \r\n        if (!res.ok) {\r\n          const errorData = await res.json().catch(() => ({}));\r\n          throw new Error(errorData.message || \"Failed to save note\");\r\n        }\r\n        \r\n        const data = await res.json();\r\n        setNotes((prev) => ({\r\n          ...prev,\r\n          [FaultID]: [data.note, ...(prev[FaultID] || [])],\r\n        }));\r\n        \r\n        return data.note;\r\n      } catch (err) {\r\n        setError(err.message);\r\n        throw err;\r\n      }\r\n    },\r\n    [token]\r\n  );\r\n\r\n  const editNote = useCallback(\r\n    async ({ id, Notes, FaultID }) => {\r\n      if (!token) throw new Error(\"Authentication required.\");\r\n      if (!Notes || Notes.trim() === '') throw new Error(\"Notes cannot be empty.\");\r\n      \r\n      setError(null);\r\n      \r\n      try {\r\n        const res = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/faults/notes/${id}`, {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n          body: JSON.stringify({ Notes: Notes.trim() }),\r\n        });\r\n        \r\n        if (!res.ok) {\r\n          const errorData = await res.json().catch(() => ({}));\r\n          throw new Error(errorData.message || \"Failed to edit note\");\r\n        }\r\n        \r\n        const data = await res.json();\r\n        setNotes((prev) => ({\r\n          ...prev,\r\n          [FaultID]: (prev[FaultID] || []).map((note) => \r\n            note.id === id ? data.note : note\r\n          ),\r\n        }));\r\n        \r\n        return data.note;\r\n      } catch (err) {\r\n        setError(err.message);\r\n        throw err;\r\n      }\r\n    },\r\n    [token]\r\n  );\r\n\r\n  const deleteNote = useCallback(\r\n    async ({ id, FaultID }) => {\r\n      if (!token) throw new Error(\"Authentication required.\");\r\n      \r\n      setError(null);\r\n      \r\n      try {\r\n        const res = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/faults/notes/${id}`, {\r\n          method: \"DELETE\",\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        \r\n        if (!res.ok) {\r\n          const errorData = await res.json().catch(() => ({}));\r\n          throw new Error(errorData.message || \"Failed to delete note\");\r\n        }\r\n        \r\n        setNotes((prev) => ({\r\n          ...prev,\r\n          [FaultID]: (prev[FaultID] || []).filter((note) => note.id !== id),\r\n        }));\r\n        \r\n        return true;\r\n      } catch (err) {\r\n        setError(err.message);\r\n        throw err;\r\n      }\r\n    },\r\n    [token]\r\n  );\r\n\r\n  const clearNotesCache = useCallback(() => {\r\n    setNotes({});\r\n    setError(null);\r\n  }, []);\r\n\r\n  return { \r\n    notes, \r\n    loading, \r\n    error, \r\n    fetchNotes, \r\n    addNote, \r\n    editNote, \r\n    deleteNote,\r\n    clearNotesCache \r\n  };\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}