{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\nexport function useFaultNotes(token) {\n  _s();\n  const [notes, setNotes] = useState({}); // { [faultId]: [note objects] }\n\n  const fetchNotes = useCallback(async faultId => {\n    if (!token) return;\n    try {\n      const res = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/faults/notes/${faultId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (!res.ok) throw new Error(\"Could not fetch notes\");\n      const data = await res.json();\n      setNotes(prev => ({\n        ...prev,\n        [faultId]: data\n      }));\n    } catch (err) {\n      console.error(err);\n    }\n  }, [token]);\n  const addNote = useCallback(async ({\n    FaultID,\n    Notes\n  }) => {\n    if (!token) throw new Error(\"Authentication required.\");\n    const res = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/faults/notes`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        FaultID,\n        Notes\n      })\n    });\n    if (!res.ok) throw new Error(\"Failed to save note\");\n    const data = await res.json();\n    setNotes(prev => ({\n      ...prev,\n      [FaultID]: [data.note, ...(prev[FaultID] || [])]\n    }));\n    return data.note;\n  }, [token]);\n  const editNote = useCallback(async ({\n    id,\n    Notes,\n    FaultID\n  }) => {\n    if (!token) throw new Error(\"Authentication required.\");\n    const res = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/faults/notes/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        Notes\n      })\n    });\n    if (!res.ok) throw new Error(\"Failed to edit note\");\n    const data = await res.json();\n    setNotes(prev => {\n      var _prev$FaultID;\n      return {\n        ...prev,\n        [FaultID]: [data.note, ...(((_prev$FaultID = prev[FaultID]) === null || _prev$FaultID === void 0 ? void 0 : _prev$FaultID.filter(n => n.id !== id)) || [])]\n      };\n    });\n    return data.note;\n  }, [token]);\n  return {\n    notes,\n    fetchNotes,\n    addNote,\n    editNote\n  };\n}\n_s(useFaultNotes, \"13KyxF4Yo2PnRJuxCWUM3XIdyhM=\");","map":{"version":3,"names":["useState","useCallback","useFaultNotes","token","_s","notes","setNotes","fetchNotes","faultId","res","fetch","process","env","REACT_APP_BACKEND_URL","headers","Authorization","ok","Error","data","json","prev","err","console","error","addNote","FaultID","Notes","method","body","JSON","stringify","note","editNote","id","_prev$FaultID","filter","n"],"sources":["C:/Users/Janith/Desktop/My Projects/Fault Management System/Frontend/src/useFaultNotes.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\r\n\r\nexport function useFaultNotes(token) {\r\n  const [notes, setNotes] = useState({}); // { [faultId]: [note objects] }\r\n\r\n  const fetchNotes = useCallback(\r\n    async (faultId) => {\r\n      if (!token) return;\r\n      try {\r\n        const res = await fetch(\r\n          `${process.env.REACT_APP_BACKEND_URL}/api/faults/notes/${faultId}`,\r\n          {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          }\r\n        );\r\n        if (!res.ok) throw new Error(\"Could not fetch notes\");\r\n        const data = await res.json();\r\n        setNotes((prev) => ({ ...prev, [faultId]: data }));\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    },\r\n    [token]\r\n  );\r\n\r\n  const addNote = useCallback(\r\n    async ({ FaultID, Notes }) => {\r\n      if (!token) throw new Error(\"Authentication required.\");\r\n      const res = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/faults/notes`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({ FaultID, Notes }),\r\n      });\r\n      if (!res.ok) throw new Error(\"Failed to save note\");\r\n      const data = await res.json();\r\n      setNotes((prev) => ({\r\n        ...prev,\r\n        [FaultID]: [data.note, ...(prev[FaultID] || [])],\r\n      }));\r\n      return data.note;\r\n    },\r\n    [token]\r\n  );\r\n\r\n  const editNote = useCallback(\r\n    async ({ id, Notes, FaultID }) => {\r\n      if (!token) throw new Error(\"Authentication required.\");\r\n      const res = await fetch(`${process.env.REACT_APP_BACKEND_URL}/api/faults/notes/${id}`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({ Notes }),\r\n      });\r\n      if (!res.ok) throw new Error(\"Failed to edit note\");\r\n      const data = await res.json();\r\n      setNotes((prev) => ({\r\n        ...prev,\r\n        [FaultID]: [data.note, ...(prev[FaultID]?.filter((n) => n.id !== id) || [])],\r\n      }));\r\n      return data.note;\r\n    },\r\n    [token]\r\n  );\r\n\r\n  return { notes, fetchNotes, addNote, editNote };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}